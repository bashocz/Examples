prompt /* 1 - CFG_VERSION */;
CREATE TABLE TMAPPER_WS_CFG_VERSION
(
	id           NUMBER(38) NOT NULL,
	description  VARCHAR2(2000)
);

ALTER TABLE TMAPPER_WS_CFG_VERSION ADD CONSTRAINT PK_CFG_VERSION 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_VERSION_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_VERSION_id
BEFORE INSERT
ON TMAPPER_WS_CFG_VERSION
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_VERSION_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

prompt /* 2 - MAPPER_VERSION */;
CREATE TABLE TMAPPER_WS_MAPPER_VERSION
(
	id              NUMBER(38) NOT NULL,
	mapper_version  VARCHAR2(50) NOT NULL,
	cfg_version_id  NUMBER(38) NOT NULL
);

ALTER TABLE TMAPPER_WS_MAPPER_VERSION ADD CONSTRAINT PK_MAPPER_VERSION 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_MAPPER_VERSI_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_MAPPER_VERSI_id
BEFORE INSERT
ON TMAPPER_WS_MAPPER_VERSION
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_MAPPER_VERSI_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_MAPPER_VERSION ADD CONSTRAINT FK_CFG_VERSION 
	FOREIGN KEY (cfg_version_id) REFERENCES TMAPPER_WS_CFG_VERSION (id);

prompt /* 3 - CFG_LEVEL */;
CREATE TABLE TMAPPER_WS_CFG_LEVEL
(
	id    NUMBER(38) NOT NULL,
	name  VARCHAR2(50) NOT NULL
);

ALTER TABLE TMAPPER_WS_CFG_LEVEL
	ADD CONSTRAINT UQ_CFG_LEVEL_NAME UNIQUE (name);

ALTER TABLE TMAPPER_WS_CFG_LEVEL ADD CONSTRAINT PK_CFG_LEVEL 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_LEVEL_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_LEVEL_id
BEFORE INSERT
ON TMAPPER_WS_CFG_LEVEL
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_LEVEL_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

prompt /* 4 - CONFIGURATION */;
CREATE TABLE TMAPPER_WS_CONFIGURATION
(
	id             NUMBER(38) NOT NULL,
	cfg_level_id   NUMBER(38) NOT NULL,
	configuration  VARCHAR2(50) NOT NULL
);

ALTER TABLE TMAPPER_WS_CONFIGURATION
	ADD CONSTRAINT UQ_CONFIGURATION UNIQUE (cfg_level_id, configuration);

ALTER TABLE TMAPPER_WS_CONFIGURATION ADD CONSTRAINT PK_CONFIGURATION 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CONFIGURATIO_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CONFIGURATIO_id
BEFORE INSERT
ON TMAPPER_WS_CONFIGURATION
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CONFIGURATIO_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_CONFIGURATION ADD CONSTRAINT FK_CFG_LEVEL 
	FOREIGN KEY (cfg_level_id) REFERENCES TMAPPER_WS_CFG_LEVEL (id);

prompt /* 5 - CFG_TYPE */;
CREATE TABLE TMAPPER_WS_CFG_TYPE
(
	id           NUMBER(38) NOT NULL,
	type         VARCHAR2(50) NOT NULL,
	description  VARCHAR2(2000)
);

ALTER TABLE TMAPPER_WS_CFG_TYPE
	ADD CONSTRAINT UQ_CFG_TYPE UNIQUE (type);

ALTER TABLE TMAPPER_WS_CFG_TYPE ADD CONSTRAINT PK_CFG_TYPE 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_TYPE_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_TYPE_id
BEFORE INSERT
ON TMAPPER_WS_CFG_TYPE
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_TYPE_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

prompt /* 6 - CFG_DATA_TYPE */;
CREATE TABLE TMAPPER_WS_CFG_DATA_TYPE
(
	id         NUMBER(38) NOT NULL,
	name       VARCHAR2(50) NOT NULL,
	length     NUMBER(8),
	precision  NUMBER(8)
);

ALTER TABLE TMAPPER_WS_CFG_DATA_TYPE ADD CONSTRAINT PK_CFG_DATA_TYPE 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_DATA_TYP_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_DATA_TYP_id
BEFORE INSERT
ON TMAPPER_WS_CFG_DATA_TYPE
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_DATA_TYP_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

prompt /* 7 - CFG_KEY */;
CREATE TABLE TMAPPER_WS_CFG_KEY
(
	id                NUMBER(38) NOT NULL,
	name              VARCHAR2(50) NOT NULL,
	description       VARCHAR2(2000),
	cfg_data_type_id  NUMBER(38) NOT NULL
);

ALTER TABLE TMAPPER_WS_CFG_KEY
	ADD CONSTRAINT UQ_TMAPPER_WS_CFG_KEY_name UNIQUE (name);

ALTER TABLE TMAPPER_WS_CFG_KEY ADD CONSTRAINT PK_CFG_KEY 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_KEY_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_KEY_id
BEFORE INSERT
ON TMAPPER_WS_CFG_KEY
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_KEY_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_CFG_KEY ADD CONSTRAINT FK_CFG_DATA_TYPE 
	FOREIGN KEY (cfg_data_type_id) REFERENCES TMAPPER_WS_CFG_DATA_TYPE (id);

prompt /* 8 - CFG_TEMPLATE KEY */;
CREATE TABLE TMAPPER_WS_CFG_TEMPLATE_KEY
(
	id          NUMBER(38) NOT NULL,
	parent_id   NUMBER(38),
	cfg_key_id  NUMBER(38) NOT NULL,
	mes_name     VARCHAR2(50),
	editor_data VARCHAR2(2000)
);

ALTER TABLE TMAPPER_WS_CFG_TEMPLATE_KEY ADD CONSTRAINT PK_CFG_TEMPLATE_KEY 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_TEMPLKEY_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_TEMPLKEY_id
BEFORE INSERT
ON TMAPPER_WS_CFG_TEMPLATE_KEY
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_TEMPLKEY_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_CFG_TEMPLATE_KEY ADD CONSTRAINT FK_CFG_KEY 
	FOREIGN KEY (cfg_key_id) REFERENCES TMAPPER_WS_CFG_KEY (id);

ALTER TABLE TMAPPER_WS_CFG_TEMPLATE_KEY ADD CONSTRAINT FK_PARENT 
	FOREIGN KEY (parent_id) REFERENCES TMAPPER_WS_CFG_TEMPLATE_KEY (id);

prompt /* 9 - CFG_TEMPLATE */;
CREATE TABLE TMAPPER_WS_CFG_TEMPLATE
(
	id                         NUMBER(38) NOT NULL,
	cfg_type_id                NUMBER(38) NOT NULL,
	cfg_version_id             NUMBER(38) NOT NULL,
	root_cfg_template_key_id  NUMBER(38) NOT NULL
);

ALTER TABLE TMAPPER_WS_CFG_TEMPLATE ADD CONSTRAINT PK_CFG_TEMPLATE 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_TEMPLATE_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_TEMPLATE_id
BEFORE INSERT
ON TMAPPER_WS_CFG_TEMPLATE
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_TEMPLATE_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_CFG_TEMPLATE ADD CONSTRAINT FK_CFG_TYPE 
	FOREIGN KEY (cfg_type_id) REFERENCES TMAPPER_WS_CFG_TYPE (id);

ALTER TABLE TMAPPER_WS_CFG_TEMPLATE ADD CONSTRAINT FK_CFG_VER 
	FOREIGN KEY (cfg_version_id) REFERENCES TMAPPER_WS_CFG_VERSION (id);

ALTER TABLE TMAPPER_WS_CFG_TEMPLATE ADD CONSTRAINT FK_ROOT_CFG_TEMPLATE_KEY 
	FOREIGN KEY (root_cfg_template_key_id) REFERENCES TMAPPER_WS_CFG_TEMPLATE_KEY (id);


prompt /* 10 - CFG_DATA */;
CREATE TABLE TMAPPER_WS_CFG_DATA
(
	id                NUMBER(38) NOT NULL,
	cfg_key_id        NUMBER(38) NOT NULL,
	idx		  NUMBER(38) NOT NULL,
	data              VARCHAR2(2000),
	configuration_id  NUMBER(38) NOT NULL
);

ALTER TABLE TMAPPER_WS_CFG_DATA ADD CONSTRAINT PK_CFG_DATA 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_CFG_DATA_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_CFG_DATA_id
BEFORE INSERT
ON TMAPPER_WS_CFG_DATA
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_CFG_DATA_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_CFG_DATA ADD CONSTRAINT FK_CFG_DATA_KEY 
	FOREIGN KEY (cfg_key_id) REFERENCES TMAPPER_WS_CFG_KEY (id);

ALTER TABLE TMAPPER_WS_CFG_DATA ADD CONSTRAINT FK_CONFIGURATION 
	FOREIGN KEY (configuration_id) REFERENCES TMAPPER_WS_CONFIGURATION (id);
 
prompt /* 11 - PLATFORM */;
CREATE TABLE TMAPPER_WS_PLATFORM
(
	id           NUMBER(38) NOT NULL,
	platform     VARCHAR2(50) NOT NULL,
	model        VARCHAR2(50) NOT NULL,
	description  VARCHAR2(2000)
);


ALTER TABLE TMAPPER_WS_PLATFORM
	ADD CONSTRAINT UQ_PLATFORM UNIQUE (platform, model);

ALTER TABLE TMAPPER_WS_PLATFORM ADD CONSTRAINT PK_PLATFORM 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_PLATFORM_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_PLATFORM_id
BEFORE INSERT
ON TMAPPER_WS_PLATFORM
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_PLATFORM_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

prompt /* 12 - EQUIPMENT_TYPE*/;
CREATE TABLE TMAPPER_WS_EQUIPMENT_TYPE
(
	id              NUMBER(38) NOT NULL,
	equipment_type  VARCHAR2(50) NOT NULL,
	description     VARCHAR2(2000)
);

ALTER TABLE TMAPPER_WS_EQUIPMENT_TYPE
	ADD CONSTRAINT UQ_EQUIPMENT_TYPE UNIQUE (equipment_type);

ALTER TABLE TMAPPER_WS_EQUIPMENT_TYPE ADD CONSTRAINT PK_EQUIPMENT_TYPE 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_EQUIPMENT_TY_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_EQUIPMENT_TY_id
BEFORE INSERT
ON TMAPPER_WS_EQUIPMENT_TYPE
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_EQUIPMENT_TY_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

prompt /* 13 - EQUIPMENT */;
CREATE TABLE TMAPPER_WS_EQUIPMENT
(
	id           VARCHAR2(50) NOT NULL,
	eq_type_id   NUMBER(38) NOT NULL,
	platform_id  NUMBER(38) NOT NULL
);

ALTER TABLE TMAPPER_WS_EQUIPMENT ADD CONSTRAINT PK_EQUIPMENT 
	PRIMARY KEY (id);

CREATE SEQUENCE TMAPPER_WS_EQUIPMENT_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_EQUIPMENT_id
BEFORE INSERT
ON TMAPPER_WS_EQUIPMENT
FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN 
  SELECT TMAPPER_WS_EQUIPMENT_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_EQUIPMENT ADD CONSTRAINT FK_EQUIPMENT_TYPE 
	FOREIGN KEY (eq_type_id) REFERENCES TMAPPER_WS_EQUIPMENT_TYPE (id);

ALTER TABLE TMAPPER_WS_EQUIPMENT ADD CONSTRAINT FK_PLATFORM 
	FOREIGN KEY (platform_id) REFERENCES TMAPPER_WS_PLATFORM (id);

PROMPT /* 14 - SYSTEM */;
CREATE TABLE TMAPPER_WS_SYSTEM
(
  id        NUMBER(38) NOT NULL,
  prober_id VARCHAR2(50) NOT NULL,
  tester_id VARCHAR2(50)
);

CREATE SEQUENCE TMAPPER_WS_SYSTEM_id_SEQ
INCREMENT BY 1
START WITH 0
NOMAXVALUE
MINVALUE 0
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_TMAPPER_WS_SYSTEM_id
  BEFORE INSERT ON TMAPPER_WS_SYSTEM
  FOR EACH ROW
BEGIN
  IF :NEW.id IS NULL THEN
    SELECT TMAPPER_WS_SYSTEM_id_SEQ.NEXTVAL INTO :NEW.id FROM DUAL;
  END IF;
END;
/

ALTER TABLE TMAPPER_WS_SYSTEM
  ADD CONSTRAINT PK_SYSTEM PRIMARY KEY (id);

ALTER TABLE TMAPPER_WS_SYSTEM
  ADD CONSTRAINT FK_PROBER FOREIGN KEY (prober_id)
  REFERENCES TMAPPER_WS_EQUIPMENT (id);

ALTER TABLE TMAPPER_WS_SYSTEM
  ADD CONSTRAINT FK_TESTER FOREIGN KEY (tester_id)
  REFERENCES TMAPPER_WS_EQUIPMENT (id);

ALTER TABLE TMAPPER_WS_SYSTEM
  ADD CONSTRAINT UQ_SYSTEM UNIQUE (prober_id, tester_id);