//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IPDetection.IpDetectionServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfIPDetectionService")]
    public partial class ClientInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ControlIpAddressField;
        
        private string IpAddressField;
        
        private bool IsControllerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ControlIpAddress {
            get {
                return this.ControlIpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlIpAddressField, value) != true)) {
                    this.ControlIpAddressField = value;
                    this.RaisePropertyChanged("ControlIpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsController {
            get {
                return this.IsControllerField;
            }
            set {
                if ((this.IsControllerField.Equals(value) != true)) {
                    this.IsControllerField = value;
                    this.RaisePropertyChanged("IsController");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IpDetectionServiceReference.IIpDetectionService")]
    public interface IIpDetectionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIpDetectionService/GetClientInfo", ReplyAction="http://tempuri.org/IIpDetectionService/GetClientInfoResponse")]
        System.IAsyncResult BeginGetClientInfo(System.AsyncCallback callback, object asyncState);
        
        IPDetection.IpDetectionServiceReference.ClientInfo EndGetClientInfo(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIpDetectionServiceChannel : IPDetection.IpDetectionServiceReference.IIpDetectionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IPDetection.IpDetectionServiceReference.ClientInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IPDetection.IpDetectionServiceReference.ClientInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IpDetectionServiceClient : System.ServiceModel.ClientBase<IPDetection.IpDetectionServiceReference.IIpDetectionService>, IPDetection.IpDetectionServiceReference.IIpDetectionService {
        
        private BeginOperationDelegate onBeginGetClientInfoDelegate;
        
        private EndOperationDelegate onEndGetClientInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public IpDetectionServiceClient() {
        }
        
        public IpDetectionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IpDetectionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IpDetectionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IpDetectionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetClientInfoCompletedEventArgs> GetClientInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPDetection.IpDetectionServiceReference.IIpDetectionService.BeginGetClientInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IPDetection.IpDetectionServiceReference.ClientInfo IPDetection.IpDetectionServiceReference.IIpDetectionService.EndGetClientInfo(System.IAsyncResult result) {
            return base.Channel.EndGetClientInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetClientInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPDetection.IpDetectionServiceReference.IIpDetectionService)(this)).BeginGetClientInfo(callback, asyncState);
        }
        
        private object[] OnEndGetClientInfo(System.IAsyncResult result) {
            IPDetection.IpDetectionServiceReference.ClientInfo retVal = ((IPDetection.IpDetectionServiceReference.IIpDetectionService)(this)).EndGetClientInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientInfoCompleted(object state) {
            if ((this.GetClientInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientInfoCompleted(this, new GetClientInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientInfoAsync() {
            this.GetClientInfoAsync(null);
        }
        
        public void GetClientInfoAsync(object userState) {
            if ((this.onBeginGetClientInfoDelegate == null)) {
                this.onBeginGetClientInfoDelegate = new BeginOperationDelegate(this.OnBeginGetClientInfo);
            }
            if ((this.onEndGetClientInfoDelegate == null)) {
                this.onEndGetClientInfoDelegate = new EndOperationDelegate(this.OnEndGetClientInfo);
            }
            if ((this.onGetClientInfoCompletedDelegate == null)) {
                this.onGetClientInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientInfoDelegate, null, this.onEndGetClientInfoDelegate, this.onGetClientInfoCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IPDetection.IpDetectionServiceReference.IIpDetectionService CreateChannel() {
            return new IpDetectionServiceClientChannel(this);
        }
        
        private class IpDetectionServiceClientChannel : ChannelBase<IPDetection.IpDetectionServiceReference.IIpDetectionService>, IPDetection.IpDetectionServiceReference.IIpDetectionService {
            
            public IpDetectionServiceClientChannel(System.ServiceModel.ClientBase<IPDetection.IpDetectionServiceReference.IIpDetectionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetClientInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetClientInfo", _args, callback, asyncState);
                return _result;
            }
            
            public IPDetection.IpDetectionServiceReference.ClientInfo EndGetClientInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                IPDetection.IpDetectionServiceReference.ClientInfo _result = ((IPDetection.IpDetectionServiceReference.ClientInfo)(base.EndInvoke("GetClientInfo", _args, result)));
                return _result;
            }
        }
    }
}
