//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace WebMech.WebMechService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SurfaceData", Namespace="http:\\WebMech.Web")]
    public partial class SurfaceData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CreationDateField;
        
        private int IdField;
        
        private int MeasurementCountField;
        
        private System.DateTime ModificationDateField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MeasurementCount {
            get {
                return this.MeasurementCountField;
            }
            set {
                if ((this.MeasurementCountField.Equals(value) != true)) {
                    this.MeasurementCountField = value;
                    this.RaisePropertyChanged("MeasurementCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModificationDate {
            get {
                return this.ModificationDateField;
            }
            set {
                if ((this.ModificationDateField.Equals(value) != true)) {
                    this.ModificationDateField = value;
                    this.RaisePropertyChanged("ModificationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchFilterData", Namespace="http:\\WebMech.Web")]
    public partial class SearchFilterData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountField;
        
        private System.DateTime FromField;
        
        private int LastMonthsField;
        
        private WebMech.WebMechService.SearchType SearchTypeField;
        
        private WebMech.WebMechService.SortDirection SortDirectionField;
        
        private WebMech.WebMechService.SortType SortTypeField;
        
        private int StartField;
        
        private System.DateTime ToField;
        
        private int TotalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime From {
            get {
                return this.FromField;
            }
            set {
                if ((this.FromField.Equals(value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastMonths {
            get {
                return this.LastMonthsField;
            }
            set {
                if ((this.LastMonthsField.Equals(value) != true)) {
                    this.LastMonthsField = value;
                    this.RaisePropertyChanged("LastMonths");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebMech.WebMechService.SearchType SearchType {
            get {
                return this.SearchTypeField;
            }
            set {
                if ((this.SearchTypeField.Equals(value) != true)) {
                    this.SearchTypeField = value;
                    this.RaisePropertyChanged("SearchType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebMech.WebMechService.SortDirection SortDirection {
            get {
                return this.SortDirectionField;
            }
            set {
                if ((this.SortDirectionField.Equals(value) != true)) {
                    this.SortDirectionField = value;
                    this.RaisePropertyChanged("SortDirection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebMech.WebMechService.SortType SortType {
            get {
                return this.SortTypeField;
            }
            set {
                if ((this.SortTypeField.Equals(value) != true)) {
                    this.SortTypeField = value;
                    this.RaisePropertyChanged("SortType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime To {
            get {
                return this.ToField;
            }
            set {
                if ((this.ToField.Equals(value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchType", Namespace="http:\\WebMech.Web")]
    public enum SearchType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LastMonths = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateRange = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SortDirection", Namespace="http:\\WebMech.Web")]
    public enum SortDirection : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ascending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Descending = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SortType", Namespace="http:\\WebMech.Web")]
    public enum SortType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Date = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NumberOfSamples = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageInfoData", Namespace="http:\\WebMech.Web")]
    public partial class PageInfoData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int EndField;
        
        private bool IsNextField;
        
        private bool IsPreviousField;
        
        private int StartField;
        
        private int TotalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNext {
            get {
                return this.IsNextField;
            }
            set {
                if ((this.IsNextField.Equals(value) != true)) {
                    this.IsNextField = value;
                    this.RaisePropertyChanged("IsNext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPrevious {
            get {
                return this.IsPreviousField;
            }
            set {
                if ((this.IsPreviousField.Equals(value) != true)) {
                    this.IsPreviousField = value;
                    this.RaisePropertyChanged("IsPrevious");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SampleData", Namespace="http:\\WebMech.Web")]
    public partial class SampleData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FileNameField;
        
        private int IdField;
        
        private System.DateTime ModificationDateField;
        
        private System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.ParameterData> ParameterListField;
        
        private System.DateTime SampleDateField;
        
        private int SurfaceIdField;
        
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModificationDate {
            get {
                return this.ModificationDateField;
            }
            set {
                if ((this.ModificationDateField.Equals(value) != true)) {
                    this.ModificationDateField = value;
                    this.RaisePropertyChanged("ModificationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.ParameterData> ParameterList {
            get {
                return this.ParameterListField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterListField, value) != true)) {
                    this.ParameterListField = value;
                    this.RaisePropertyChanged("ParameterList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SampleDate {
            get {
                return this.SampleDateField;
            }
            set {
                if ((this.SampleDateField.Equals(value) != true)) {
                    this.SampleDateField = value;
                    this.RaisePropertyChanged("SampleDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SurfaceId {
            get {
                return this.SurfaceIdField;
            }
            set {
                if ((this.SurfaceIdField.Equals(value) != true)) {
                    this.SurfaceIdField = value;
                    this.RaisePropertyChanged("SurfaceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParameterData", Namespace="http:\\WebMech.Web")]
    public partial class ParameterData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Model3DData", Namespace="http:\\WebMech.Web")]
    public partial class Model3DData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.PointData> PointListField;
        
        private double XmaxField;
        
        private double XminField;
        
        private double YmaxField;
        
        private double YminField;
        
        private double ZmaxField;
        
        private double ZmeanField;
        
        private double ZminField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.PointData> PointList {
            get {
                return this.PointListField;
            }
            set {
                if ((object.ReferenceEquals(this.PointListField, value) != true)) {
                    this.PointListField = value;
                    this.RaisePropertyChanged("PointList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Xmax {
            get {
                return this.XmaxField;
            }
            set {
                if ((this.XmaxField.Equals(value) != true)) {
                    this.XmaxField = value;
                    this.RaisePropertyChanged("Xmax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Xmin {
            get {
                return this.XminField;
            }
            set {
                if ((this.XminField.Equals(value) != true)) {
                    this.XminField = value;
                    this.RaisePropertyChanged("Xmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ymax {
            get {
                return this.YmaxField;
            }
            set {
                if ((this.YmaxField.Equals(value) != true)) {
                    this.YmaxField = value;
                    this.RaisePropertyChanged("Ymax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ymin {
            get {
                return this.YminField;
            }
            set {
                if ((this.YminField.Equals(value) != true)) {
                    this.YminField = value;
                    this.RaisePropertyChanged("Ymin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Zmax {
            get {
                return this.ZmaxField;
            }
            set {
                if ((this.ZmaxField.Equals(value) != true)) {
                    this.ZmaxField = value;
                    this.RaisePropertyChanged("Zmax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Zmean {
            get {
                return this.ZmeanField;
            }
            set {
                if ((this.ZmeanField.Equals(value) != true)) {
                    this.ZmeanField = value;
                    this.RaisePropertyChanged("Zmean");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Zmin {
            get {
                return this.ZminField;
            }
            set {
                if ((this.ZminField.Equals(value) != true)) {
                    this.ZminField = value;
                    this.RaisePropertyChanged("Zmin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointData", Namespace="http:\\WebMech.Web")]
    public partial class PointData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double XField;
        
        private double YField;
        
        private double ZField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Z {
            get {
                return this.ZField;
            }
            set {
                if ((this.ZField.Equals(value) != true)) {
                    this.ZField = value;
                    this.RaisePropertyChanged("Z");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebMechService.IWebMechService")]
    public interface IWebMechService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSurface/AddSurface", ReplyAction="http://tempuri.org/IWebMechSurface/AddSurfaceResponse")]
        System.IAsyncResult BeginAddSurface(string name, System.AsyncCallback callback, object asyncState);
        
        WebMech.WebMechService.SurfaceData EndAddSurface(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSurface/ModifySurface", ReplyAction="http://tempuri.org/IWebMechSurface/ModifySurfaceResponse")]
        System.IAsyncResult BeginModifySurface(WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState);
        
        void EndModifySurface(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSurface/DeleteSurface", ReplyAction="http://tempuri.org/IWebMechSurface/DeleteSurfaceResponse")]
        System.IAsyncResult BeginDeleteSurface(WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteSurface(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSurface/GetSurfaceById", ReplyAction="http://tempuri.org/IWebMechSurface/GetSurfaceByIdResponse")]
        System.IAsyncResult BeginGetSurfaceById(int surfaceId, System.AsyncCallback callback, object asyncState);
        
        WebMech.WebMechService.SurfaceData EndGetSurfaceById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSurface/GetSurfaceByName", ReplyAction="http://tempuri.org/IWebMechSurface/GetSurfaceByNameResponse")]
        System.IAsyncResult BeginGetSurfaceByName(string name, System.AsyncCallback callback, object asyncState);
        
        WebMech.WebMechService.SurfaceData EndGetSurfaceByName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSurface/GetSurfaceListPageInfo", ReplyAction="http://tempuri.org/IWebMechSurface/GetSurfaceListPageInfoResponse")]
        System.IAsyncResult BeginGetSurfaceListPageInfo(WebMech.WebMechService.SearchFilterData filterData, System.AsyncCallback callback, object asyncState);
        
        WebMech.WebMechService.PageInfoData EndGetSurfaceListPageInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSurface/GetSurfaceList", ReplyAction="http://tempuri.org/IWebMechSurface/GetSurfaceListResponse")]
        System.IAsyncResult BeginGetSurfaceList(WebMech.WebMechService.SearchFilterData filterData, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData> EndGetSurfaceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSample/UploadSample", ReplyAction="http://tempuri.org/IWebMechSample/UploadSampleResponse")]
        System.IAsyncResult BeginUploadSample(WebMech.WebMechService.SurfaceData surfaceData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, System.AsyncCallback callback, object asyncState);
        
        WebMech.WebMechService.SampleData EndUploadSample(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSample/ModifySample", ReplyAction="http://tempuri.org/IWebMechSample/ModifySampleResponse")]
        System.IAsyncResult BeginModifySample(WebMech.WebMechService.SampleData sampleData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, System.AsyncCallback callback, object asyncState);
        
        void EndModifySample(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSample/DeleteSample", ReplyAction="http://tempuri.org/IWebMechSample/DeleteSampleResponse")]
        System.IAsyncResult BeginDeleteSample(WebMech.WebMechService.SampleData sampleData, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteSample(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSample/GetSampleListPageInfo", ReplyAction="http://tempuri.org/IWebMechSample/GetSampleListPageInfoResponse")]
        System.IAsyncResult BeginGetSampleListPageInfo(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState);
        
        WebMech.WebMechService.PageInfoData EndGetSampleListPageInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSample/GetSampleList", ReplyAction="http://tempuri.org/IWebMechSample/GetSampleListResponse")]
        System.IAsyncResult BeginGetSampleList(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData> EndGetSampleList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWebMechSample/GetSample", ReplyAction="http://tempuri.org/IWebMechSample/GetSampleResponse")]
        System.IAsyncResult BeginGetSample(WebMech.WebMechService.SampleData sampleData, System.AsyncCallback callback, object asyncState);
        
        WebMech.WebMechService.Model3DData EndGetSample(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebMechServiceChannel : WebMech.WebMechService.IWebMechService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSurfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSurfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebMech.WebMechService.SurfaceData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebMech.WebMechService.SurfaceData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSurfaceByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSurfaceByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebMech.WebMechService.SurfaceData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebMech.WebMechService.SurfaceData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSurfaceByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSurfaceByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebMech.WebMechService.SurfaceData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebMech.WebMechService.SurfaceData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSurfaceListPageInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSurfaceListPageInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebMech.WebMechService.PageInfoData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebMech.WebMechService.PageInfoData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSurfaceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSurfaceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadSampleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadSampleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebMech.WebMechService.SampleData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebMech.WebMechService.SampleData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSampleListPageInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSampleListPageInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebMech.WebMechService.PageInfoData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebMech.WebMechService.PageInfoData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSampleListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSampleListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSampleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSampleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebMech.WebMechService.Model3DData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebMech.WebMechService.Model3DData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebMechServiceClient : System.ServiceModel.ClientBase<WebMech.WebMechService.IWebMechService>, WebMech.WebMechService.IWebMechService {
        
        private BeginOperationDelegate onBeginAddSurfaceDelegate;
        
        private EndOperationDelegate onEndAddSurfaceDelegate;
        
        private System.Threading.SendOrPostCallback onAddSurfaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifySurfaceDelegate;
        
        private EndOperationDelegate onEndModifySurfaceDelegate;
        
        private System.Threading.SendOrPostCallback onModifySurfaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSurfaceDelegate;
        
        private EndOperationDelegate onEndDeleteSurfaceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSurfaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSurfaceByIdDelegate;
        
        private EndOperationDelegate onEndGetSurfaceByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetSurfaceByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSurfaceByNameDelegate;
        
        private EndOperationDelegate onEndGetSurfaceByNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetSurfaceByNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSurfaceListPageInfoDelegate;
        
        private EndOperationDelegate onEndGetSurfaceListPageInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetSurfaceListPageInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSurfaceListDelegate;
        
        private EndOperationDelegate onEndGetSurfaceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSurfaceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadSampleDelegate;
        
        private EndOperationDelegate onEndUploadSampleDelegate;
        
        private System.Threading.SendOrPostCallback onUploadSampleCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifySampleDelegate;
        
        private EndOperationDelegate onEndModifySampleDelegate;
        
        private System.Threading.SendOrPostCallback onModifySampleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSampleDelegate;
        
        private EndOperationDelegate onEndDeleteSampleDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSampleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSampleListPageInfoDelegate;
        
        private EndOperationDelegate onEndGetSampleListPageInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetSampleListPageInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSampleListDelegate;
        
        private EndOperationDelegate onEndGetSampleListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSampleListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSampleDelegate;
        
        private EndOperationDelegate onEndGetSampleDelegate;
        
        private System.Threading.SendOrPostCallback onGetSampleCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WebMechServiceClient() {
        }
        
        public WebMechServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebMechServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebMechServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebMechServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddSurfaceCompletedEventArgs> AddSurfaceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ModifySurfaceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteSurfaceCompleted;
        
        public event System.EventHandler<GetSurfaceByIdCompletedEventArgs> GetSurfaceByIdCompleted;
        
        public event System.EventHandler<GetSurfaceByNameCompletedEventArgs> GetSurfaceByNameCompleted;
        
        public event System.EventHandler<GetSurfaceListPageInfoCompletedEventArgs> GetSurfaceListPageInfoCompleted;
        
        public event System.EventHandler<GetSurfaceListCompletedEventArgs> GetSurfaceListCompleted;
        
        public event System.EventHandler<UploadSampleCompletedEventArgs> UploadSampleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ModifySampleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteSampleCompleted;
        
        public event System.EventHandler<GetSampleListPageInfoCompletedEventArgs> GetSampleListPageInfoCompleted;
        
        public event System.EventHandler<GetSampleListCompletedEventArgs> GetSampleListCompleted;
        
        public event System.EventHandler<GetSampleCompletedEventArgs> GetSampleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginAddSurface(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSurface(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebMech.WebMechService.SurfaceData WebMech.WebMechService.IWebMechService.EndAddSurface(System.IAsyncResult result) {
            return base.Channel.EndAddSurface(result);
        }
        
        private System.IAsyncResult OnBeginAddSurface(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginAddSurface(name, callback, asyncState);
        }
        
        private object[] OnEndAddSurface(System.IAsyncResult result) {
            WebMech.WebMechService.SurfaceData retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndAddSurface(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSurfaceCompleted(object state) {
            if ((this.AddSurfaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSurfaceCompleted(this, new AddSurfaceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSurfaceAsync(string name) {
            this.AddSurfaceAsync(name, null);
        }
        
        public void AddSurfaceAsync(string name, object userState) {
            if ((this.onBeginAddSurfaceDelegate == null)) {
                this.onBeginAddSurfaceDelegate = new BeginOperationDelegate(this.OnBeginAddSurface);
            }
            if ((this.onEndAddSurfaceDelegate == null)) {
                this.onEndAddSurfaceDelegate = new EndOperationDelegate(this.OnEndAddSurface);
            }
            if ((this.onAddSurfaceCompletedDelegate == null)) {
                this.onAddSurfaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSurfaceCompleted);
            }
            base.InvokeAsync(this.onBeginAddSurfaceDelegate, new object[] {
                        name}, this.onEndAddSurfaceDelegate, this.onAddSurfaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginModifySurface(WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifySurface(surfaceData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WebMech.WebMechService.IWebMechService.EndModifySurface(System.IAsyncResult result) {
            base.Channel.EndModifySurface(result);
        }
        
        private System.IAsyncResult OnBeginModifySurface(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SurfaceData surfaceData = ((WebMech.WebMechService.SurfaceData)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginModifySurface(surfaceData, callback, asyncState);
        }
        
        private object[] OnEndModifySurface(System.IAsyncResult result) {
            ((WebMech.WebMechService.IWebMechService)(this)).EndModifySurface(result);
            return null;
        }
        
        private void OnModifySurfaceCompleted(object state) {
            if ((this.ModifySurfaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifySurfaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifySurfaceAsync(WebMech.WebMechService.SurfaceData surfaceData) {
            this.ModifySurfaceAsync(surfaceData, null);
        }
        
        public void ModifySurfaceAsync(WebMech.WebMechService.SurfaceData surfaceData, object userState) {
            if ((this.onBeginModifySurfaceDelegate == null)) {
                this.onBeginModifySurfaceDelegate = new BeginOperationDelegate(this.OnBeginModifySurface);
            }
            if ((this.onEndModifySurfaceDelegate == null)) {
                this.onEndModifySurfaceDelegate = new EndOperationDelegate(this.OnEndModifySurface);
            }
            if ((this.onModifySurfaceCompletedDelegate == null)) {
                this.onModifySurfaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifySurfaceCompleted);
            }
            base.InvokeAsync(this.onBeginModifySurfaceDelegate, new object[] {
                        surfaceData}, this.onEndModifySurfaceDelegate, this.onModifySurfaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginDeleteSurface(WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSurface(surfaceData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WebMech.WebMechService.IWebMechService.EndDeleteSurface(System.IAsyncResult result) {
            base.Channel.EndDeleteSurface(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSurface(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SurfaceData surfaceData = ((WebMech.WebMechService.SurfaceData)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginDeleteSurface(surfaceData, callback, asyncState);
        }
        
        private object[] OnEndDeleteSurface(System.IAsyncResult result) {
            ((WebMech.WebMechService.IWebMechService)(this)).EndDeleteSurface(result);
            return null;
        }
        
        private void OnDeleteSurfaceCompleted(object state) {
            if ((this.DeleteSurfaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSurfaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSurfaceAsync(WebMech.WebMechService.SurfaceData surfaceData) {
            this.DeleteSurfaceAsync(surfaceData, null);
        }
        
        public void DeleteSurfaceAsync(WebMech.WebMechService.SurfaceData surfaceData, object userState) {
            if ((this.onBeginDeleteSurfaceDelegate == null)) {
                this.onBeginDeleteSurfaceDelegate = new BeginOperationDelegate(this.OnBeginDeleteSurface);
            }
            if ((this.onEndDeleteSurfaceDelegate == null)) {
                this.onEndDeleteSurfaceDelegate = new EndOperationDelegate(this.OnEndDeleteSurface);
            }
            if ((this.onDeleteSurfaceCompletedDelegate == null)) {
                this.onDeleteSurfaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSurfaceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSurfaceDelegate, new object[] {
                        surfaceData}, this.onEndDeleteSurfaceDelegate, this.onDeleteSurfaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginGetSurfaceById(int surfaceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSurfaceById(surfaceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebMech.WebMechService.SurfaceData WebMech.WebMechService.IWebMechService.EndGetSurfaceById(System.IAsyncResult result) {
            return base.Channel.EndGetSurfaceById(result);
        }
        
        private System.IAsyncResult OnBeginGetSurfaceById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int surfaceId = ((int)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginGetSurfaceById(surfaceId, callback, asyncState);
        }
        
        private object[] OnEndGetSurfaceById(System.IAsyncResult result) {
            WebMech.WebMechService.SurfaceData retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndGetSurfaceById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSurfaceByIdCompleted(object state) {
            if ((this.GetSurfaceByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSurfaceByIdCompleted(this, new GetSurfaceByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSurfaceByIdAsync(int surfaceId) {
            this.GetSurfaceByIdAsync(surfaceId, null);
        }
        
        public void GetSurfaceByIdAsync(int surfaceId, object userState) {
            if ((this.onBeginGetSurfaceByIdDelegate == null)) {
                this.onBeginGetSurfaceByIdDelegate = new BeginOperationDelegate(this.OnBeginGetSurfaceById);
            }
            if ((this.onEndGetSurfaceByIdDelegate == null)) {
                this.onEndGetSurfaceByIdDelegate = new EndOperationDelegate(this.OnEndGetSurfaceById);
            }
            if ((this.onGetSurfaceByIdCompletedDelegate == null)) {
                this.onGetSurfaceByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSurfaceByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetSurfaceByIdDelegate, new object[] {
                        surfaceId}, this.onEndGetSurfaceByIdDelegate, this.onGetSurfaceByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginGetSurfaceByName(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSurfaceByName(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebMech.WebMechService.SurfaceData WebMech.WebMechService.IWebMechService.EndGetSurfaceByName(System.IAsyncResult result) {
            return base.Channel.EndGetSurfaceByName(result);
        }
        
        private System.IAsyncResult OnBeginGetSurfaceByName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginGetSurfaceByName(name, callback, asyncState);
        }
        
        private object[] OnEndGetSurfaceByName(System.IAsyncResult result) {
            WebMech.WebMechService.SurfaceData retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndGetSurfaceByName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSurfaceByNameCompleted(object state) {
            if ((this.GetSurfaceByNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSurfaceByNameCompleted(this, new GetSurfaceByNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSurfaceByNameAsync(string name) {
            this.GetSurfaceByNameAsync(name, null);
        }
        
        public void GetSurfaceByNameAsync(string name, object userState) {
            if ((this.onBeginGetSurfaceByNameDelegate == null)) {
                this.onBeginGetSurfaceByNameDelegate = new BeginOperationDelegate(this.OnBeginGetSurfaceByName);
            }
            if ((this.onEndGetSurfaceByNameDelegate == null)) {
                this.onEndGetSurfaceByNameDelegate = new EndOperationDelegate(this.OnEndGetSurfaceByName);
            }
            if ((this.onGetSurfaceByNameCompletedDelegate == null)) {
                this.onGetSurfaceByNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSurfaceByNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetSurfaceByNameDelegate, new object[] {
                        name}, this.onEndGetSurfaceByNameDelegate, this.onGetSurfaceByNameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginGetSurfaceListPageInfo(WebMech.WebMechService.SearchFilterData filterData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSurfaceListPageInfo(filterData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebMech.WebMechService.PageInfoData WebMech.WebMechService.IWebMechService.EndGetSurfaceListPageInfo(System.IAsyncResult result) {
            return base.Channel.EndGetSurfaceListPageInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetSurfaceListPageInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SearchFilterData filterData = ((WebMech.WebMechService.SearchFilterData)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginGetSurfaceListPageInfo(filterData, callback, asyncState);
        }
        
        private object[] OnEndGetSurfaceListPageInfo(System.IAsyncResult result) {
            WebMech.WebMechService.PageInfoData retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndGetSurfaceListPageInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSurfaceListPageInfoCompleted(object state) {
            if ((this.GetSurfaceListPageInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSurfaceListPageInfoCompleted(this, new GetSurfaceListPageInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSurfaceListPageInfoAsync(WebMech.WebMechService.SearchFilterData filterData) {
            this.GetSurfaceListPageInfoAsync(filterData, null);
        }
        
        public void GetSurfaceListPageInfoAsync(WebMech.WebMechService.SearchFilterData filterData, object userState) {
            if ((this.onBeginGetSurfaceListPageInfoDelegate == null)) {
                this.onBeginGetSurfaceListPageInfoDelegate = new BeginOperationDelegate(this.OnBeginGetSurfaceListPageInfo);
            }
            if ((this.onEndGetSurfaceListPageInfoDelegate == null)) {
                this.onEndGetSurfaceListPageInfoDelegate = new EndOperationDelegate(this.OnEndGetSurfaceListPageInfo);
            }
            if ((this.onGetSurfaceListPageInfoCompletedDelegate == null)) {
                this.onGetSurfaceListPageInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSurfaceListPageInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetSurfaceListPageInfoDelegate, new object[] {
                        filterData}, this.onEndGetSurfaceListPageInfoDelegate, this.onGetSurfaceListPageInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginGetSurfaceList(WebMech.WebMechService.SearchFilterData filterData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSurfaceList(filterData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData> WebMech.WebMechService.IWebMechService.EndGetSurfaceList(System.IAsyncResult result) {
            return base.Channel.EndGetSurfaceList(result);
        }
        
        private System.IAsyncResult OnBeginGetSurfaceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SearchFilterData filterData = ((WebMech.WebMechService.SearchFilterData)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginGetSurfaceList(filterData, callback, asyncState);
        }
        
        private object[] OnEndGetSurfaceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData> retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndGetSurfaceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSurfaceListCompleted(object state) {
            if ((this.GetSurfaceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSurfaceListCompleted(this, new GetSurfaceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSurfaceListAsync(WebMech.WebMechService.SearchFilterData filterData) {
            this.GetSurfaceListAsync(filterData, null);
        }
        
        public void GetSurfaceListAsync(WebMech.WebMechService.SearchFilterData filterData, object userState) {
            if ((this.onBeginGetSurfaceListDelegate == null)) {
                this.onBeginGetSurfaceListDelegate = new BeginOperationDelegate(this.OnBeginGetSurfaceList);
            }
            if ((this.onEndGetSurfaceListDelegate == null)) {
                this.onEndGetSurfaceListDelegate = new EndOperationDelegate(this.OnEndGetSurfaceList);
            }
            if ((this.onGetSurfaceListCompletedDelegate == null)) {
                this.onGetSurfaceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSurfaceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSurfaceListDelegate, new object[] {
                        filterData}, this.onEndGetSurfaceListDelegate, this.onGetSurfaceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginUploadSample(WebMech.WebMechService.SurfaceData surfaceData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadSample(surfaceData, imageName, imageArray, pointsName, pointsArray, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebMech.WebMechService.SampleData WebMech.WebMechService.IWebMechService.EndUploadSample(System.IAsyncResult result) {
            return base.Channel.EndUploadSample(result);
        }
        
        private System.IAsyncResult OnBeginUploadSample(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SurfaceData surfaceData = ((WebMech.WebMechService.SurfaceData)(inValues[0]));
            string imageName = ((string)(inValues[1]));
            byte[] imageArray = ((byte[])(inValues[2]));
            string pointsName = ((string)(inValues[3]));
            byte[] pointsArray = ((byte[])(inValues[4]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginUploadSample(surfaceData, imageName, imageArray, pointsName, pointsArray, callback, asyncState);
        }
        
        private object[] OnEndUploadSample(System.IAsyncResult result) {
            WebMech.WebMechService.SampleData retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndUploadSample(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadSampleCompleted(object state) {
            if ((this.UploadSampleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadSampleCompleted(this, new UploadSampleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadSampleAsync(WebMech.WebMechService.SurfaceData surfaceData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray) {
            this.UploadSampleAsync(surfaceData, imageName, imageArray, pointsName, pointsArray, null);
        }
        
        public void UploadSampleAsync(WebMech.WebMechService.SurfaceData surfaceData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, object userState) {
            if ((this.onBeginUploadSampleDelegate == null)) {
                this.onBeginUploadSampleDelegate = new BeginOperationDelegate(this.OnBeginUploadSample);
            }
            if ((this.onEndUploadSampleDelegate == null)) {
                this.onEndUploadSampleDelegate = new EndOperationDelegate(this.OnEndUploadSample);
            }
            if ((this.onUploadSampleCompletedDelegate == null)) {
                this.onUploadSampleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadSampleCompleted);
            }
            base.InvokeAsync(this.onBeginUploadSampleDelegate, new object[] {
                        surfaceData,
                        imageName,
                        imageArray,
                        pointsName,
                        pointsArray}, this.onEndUploadSampleDelegate, this.onUploadSampleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginModifySample(WebMech.WebMechService.SampleData sampleData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifySample(sampleData, imageName, imageArray, pointsName, pointsArray, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WebMech.WebMechService.IWebMechService.EndModifySample(System.IAsyncResult result) {
            base.Channel.EndModifySample(result);
        }
        
        private System.IAsyncResult OnBeginModifySample(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SampleData sampleData = ((WebMech.WebMechService.SampleData)(inValues[0]));
            string imageName = ((string)(inValues[1]));
            byte[] imageArray = ((byte[])(inValues[2]));
            string pointsName = ((string)(inValues[3]));
            byte[] pointsArray = ((byte[])(inValues[4]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginModifySample(sampleData, imageName, imageArray, pointsName, pointsArray, callback, asyncState);
        }
        
        private object[] OnEndModifySample(System.IAsyncResult result) {
            ((WebMech.WebMechService.IWebMechService)(this)).EndModifySample(result);
            return null;
        }
        
        private void OnModifySampleCompleted(object state) {
            if ((this.ModifySampleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifySampleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifySampleAsync(WebMech.WebMechService.SampleData sampleData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray) {
            this.ModifySampleAsync(sampleData, imageName, imageArray, pointsName, pointsArray, null);
        }
        
        public void ModifySampleAsync(WebMech.WebMechService.SampleData sampleData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, object userState) {
            if ((this.onBeginModifySampleDelegate == null)) {
                this.onBeginModifySampleDelegate = new BeginOperationDelegate(this.OnBeginModifySample);
            }
            if ((this.onEndModifySampleDelegate == null)) {
                this.onEndModifySampleDelegate = new EndOperationDelegate(this.OnEndModifySample);
            }
            if ((this.onModifySampleCompletedDelegate == null)) {
                this.onModifySampleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifySampleCompleted);
            }
            base.InvokeAsync(this.onBeginModifySampleDelegate, new object[] {
                        sampleData,
                        imageName,
                        imageArray,
                        pointsName,
                        pointsArray}, this.onEndModifySampleDelegate, this.onModifySampleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginDeleteSample(WebMech.WebMechService.SampleData sampleData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSample(sampleData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WebMech.WebMechService.IWebMechService.EndDeleteSample(System.IAsyncResult result) {
            base.Channel.EndDeleteSample(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSample(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SampleData sampleData = ((WebMech.WebMechService.SampleData)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginDeleteSample(sampleData, callback, asyncState);
        }
        
        private object[] OnEndDeleteSample(System.IAsyncResult result) {
            ((WebMech.WebMechService.IWebMechService)(this)).EndDeleteSample(result);
            return null;
        }
        
        private void OnDeleteSampleCompleted(object state) {
            if ((this.DeleteSampleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSampleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSampleAsync(WebMech.WebMechService.SampleData sampleData) {
            this.DeleteSampleAsync(sampleData, null);
        }
        
        public void DeleteSampleAsync(WebMech.WebMechService.SampleData sampleData, object userState) {
            if ((this.onBeginDeleteSampleDelegate == null)) {
                this.onBeginDeleteSampleDelegate = new BeginOperationDelegate(this.OnBeginDeleteSample);
            }
            if ((this.onEndDeleteSampleDelegate == null)) {
                this.onEndDeleteSampleDelegate = new EndOperationDelegate(this.OnEndDeleteSample);
            }
            if ((this.onDeleteSampleCompletedDelegate == null)) {
                this.onDeleteSampleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSampleCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSampleDelegate, new object[] {
                        sampleData}, this.onEndDeleteSampleDelegate, this.onDeleteSampleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginGetSampleListPageInfo(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSampleListPageInfo(filterData, surfaceData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebMech.WebMechService.PageInfoData WebMech.WebMechService.IWebMechService.EndGetSampleListPageInfo(System.IAsyncResult result) {
            return base.Channel.EndGetSampleListPageInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetSampleListPageInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SearchFilterData filterData = ((WebMech.WebMechService.SearchFilterData)(inValues[0]));
            WebMech.WebMechService.SurfaceData surfaceData = ((WebMech.WebMechService.SurfaceData)(inValues[1]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginGetSampleListPageInfo(filterData, surfaceData, callback, asyncState);
        }
        
        private object[] OnEndGetSampleListPageInfo(System.IAsyncResult result) {
            WebMech.WebMechService.PageInfoData retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndGetSampleListPageInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSampleListPageInfoCompleted(object state) {
            if ((this.GetSampleListPageInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSampleListPageInfoCompleted(this, new GetSampleListPageInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSampleListPageInfoAsync(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData) {
            this.GetSampleListPageInfoAsync(filterData, surfaceData, null);
        }
        
        public void GetSampleListPageInfoAsync(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, object userState) {
            if ((this.onBeginGetSampleListPageInfoDelegate == null)) {
                this.onBeginGetSampleListPageInfoDelegate = new BeginOperationDelegate(this.OnBeginGetSampleListPageInfo);
            }
            if ((this.onEndGetSampleListPageInfoDelegate == null)) {
                this.onEndGetSampleListPageInfoDelegate = new EndOperationDelegate(this.OnEndGetSampleListPageInfo);
            }
            if ((this.onGetSampleListPageInfoCompletedDelegate == null)) {
                this.onGetSampleListPageInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSampleListPageInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetSampleListPageInfoDelegate, new object[] {
                        filterData,
                        surfaceData}, this.onEndGetSampleListPageInfoDelegate, this.onGetSampleListPageInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginGetSampleList(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSampleList(filterData, surfaceData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData> WebMech.WebMechService.IWebMechService.EndGetSampleList(System.IAsyncResult result) {
            return base.Channel.EndGetSampleList(result);
        }
        
        private System.IAsyncResult OnBeginGetSampleList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SearchFilterData filterData = ((WebMech.WebMechService.SearchFilterData)(inValues[0]));
            WebMech.WebMechService.SurfaceData surfaceData = ((WebMech.WebMechService.SurfaceData)(inValues[1]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginGetSampleList(filterData, surfaceData, callback, asyncState);
        }
        
        private object[] OnEndGetSampleList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData> retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndGetSampleList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSampleListCompleted(object state) {
            if ((this.GetSampleListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSampleListCompleted(this, new GetSampleListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSampleListAsync(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData) {
            this.GetSampleListAsync(filterData, surfaceData, null);
        }
        
        public void GetSampleListAsync(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, object userState) {
            if ((this.onBeginGetSampleListDelegate == null)) {
                this.onBeginGetSampleListDelegate = new BeginOperationDelegate(this.OnBeginGetSampleList);
            }
            if ((this.onEndGetSampleListDelegate == null)) {
                this.onEndGetSampleListDelegate = new EndOperationDelegate(this.OnEndGetSampleList);
            }
            if ((this.onGetSampleListCompletedDelegate == null)) {
                this.onGetSampleListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSampleListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSampleListDelegate, new object[] {
                        filterData,
                        surfaceData}, this.onEndGetSampleListDelegate, this.onGetSampleListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebMech.WebMechService.IWebMechService.BeginGetSample(WebMech.WebMechService.SampleData sampleData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSample(sampleData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebMech.WebMechService.Model3DData WebMech.WebMechService.IWebMechService.EndGetSample(System.IAsyncResult result) {
            return base.Channel.EndGetSample(result);
        }
        
        private System.IAsyncResult OnBeginGetSample(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WebMech.WebMechService.SampleData sampleData = ((WebMech.WebMechService.SampleData)(inValues[0]));
            return ((WebMech.WebMechService.IWebMechService)(this)).BeginGetSample(sampleData, callback, asyncState);
        }
        
        private object[] OnEndGetSample(System.IAsyncResult result) {
            WebMech.WebMechService.Model3DData retVal = ((WebMech.WebMechService.IWebMechService)(this)).EndGetSample(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSampleCompleted(object state) {
            if ((this.GetSampleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSampleCompleted(this, new GetSampleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSampleAsync(WebMech.WebMechService.SampleData sampleData) {
            this.GetSampleAsync(sampleData, null);
        }
        
        public void GetSampleAsync(WebMech.WebMechService.SampleData sampleData, object userState) {
            if ((this.onBeginGetSampleDelegate == null)) {
                this.onBeginGetSampleDelegate = new BeginOperationDelegate(this.OnBeginGetSample);
            }
            if ((this.onEndGetSampleDelegate == null)) {
                this.onEndGetSampleDelegate = new EndOperationDelegate(this.OnEndGetSample);
            }
            if ((this.onGetSampleCompletedDelegate == null)) {
                this.onGetSampleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSampleCompleted);
            }
            base.InvokeAsync(this.onBeginGetSampleDelegate, new object[] {
                        sampleData}, this.onEndGetSampleDelegate, this.onGetSampleCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WebMech.WebMechService.IWebMechService CreateChannel() {
            return new WebMechServiceClientChannel(this);
        }
        
        private class WebMechServiceClientChannel : ChannelBase<WebMech.WebMechService.IWebMechService>, WebMech.WebMechService.IWebMechService {
            
            public WebMechServiceClientChannel(System.ServiceModel.ClientBase<WebMech.WebMechService.IWebMechService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddSurface(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("AddSurface", _args, callback, asyncState);
                return _result;
            }
            
            public WebMech.WebMechService.SurfaceData EndAddSurface(System.IAsyncResult result) {
                object[] _args = new object[0];
                WebMech.WebMechService.SurfaceData _result = ((WebMech.WebMechService.SurfaceData)(base.EndInvoke("AddSurface", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginModifySurface(WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = surfaceData;
                System.IAsyncResult _result = base.BeginInvoke("ModifySurface", _args, callback, asyncState);
                return _result;
            }
            
            public void EndModifySurface(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ModifySurface", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteSurface(WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = surfaceData;
                System.IAsyncResult _result = base.BeginInvoke("DeleteSurface", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteSurface(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteSurface", _args, result);
            }
            
            public System.IAsyncResult BeginGetSurfaceById(int surfaceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = surfaceId;
                System.IAsyncResult _result = base.BeginInvoke("GetSurfaceById", _args, callback, asyncState);
                return _result;
            }
            
            public WebMech.WebMechService.SurfaceData EndGetSurfaceById(System.IAsyncResult result) {
                object[] _args = new object[0];
                WebMech.WebMechService.SurfaceData _result = ((WebMech.WebMechService.SurfaceData)(base.EndInvoke("GetSurfaceById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSurfaceByName(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("GetSurfaceByName", _args, callback, asyncState);
                return _result;
            }
            
            public WebMech.WebMechService.SurfaceData EndGetSurfaceByName(System.IAsyncResult result) {
                object[] _args = new object[0];
                WebMech.WebMechService.SurfaceData _result = ((WebMech.WebMechService.SurfaceData)(base.EndInvoke("GetSurfaceByName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSurfaceListPageInfo(WebMech.WebMechService.SearchFilterData filterData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filterData;
                System.IAsyncResult _result = base.BeginInvoke("GetSurfaceListPageInfo", _args, callback, asyncState);
                return _result;
            }
            
            public WebMech.WebMechService.PageInfoData EndGetSurfaceListPageInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                WebMech.WebMechService.PageInfoData _result = ((WebMech.WebMechService.PageInfoData)(base.EndInvoke("GetSurfaceListPageInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSurfaceList(WebMech.WebMechService.SearchFilterData filterData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filterData;
                System.IAsyncResult _result = base.BeginInvoke("GetSurfaceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData> EndGetSurfaceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData> _result = ((System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SurfaceData>)(base.EndInvoke("GetSurfaceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadSample(WebMech.WebMechService.SurfaceData surfaceData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = surfaceData;
                _args[1] = imageName;
                _args[2] = imageArray;
                _args[3] = pointsName;
                _args[4] = pointsArray;
                System.IAsyncResult _result = base.BeginInvoke("UploadSample", _args, callback, asyncState);
                return _result;
            }
            
            public WebMech.WebMechService.SampleData EndUploadSample(System.IAsyncResult result) {
                object[] _args = new object[0];
                WebMech.WebMechService.SampleData _result = ((WebMech.WebMechService.SampleData)(base.EndInvoke("UploadSample", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginModifySample(WebMech.WebMechService.SampleData sampleData, string imageName, byte[] imageArray, string pointsName, byte[] pointsArray, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = sampleData;
                _args[1] = imageName;
                _args[2] = imageArray;
                _args[3] = pointsName;
                _args[4] = pointsArray;
                System.IAsyncResult _result = base.BeginInvoke("ModifySample", _args, callback, asyncState);
                return _result;
            }
            
            public void EndModifySample(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ModifySample", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteSample(WebMech.WebMechService.SampleData sampleData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sampleData;
                System.IAsyncResult _result = base.BeginInvoke("DeleteSample", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteSample(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteSample", _args, result);
            }
            
            public System.IAsyncResult BeginGetSampleListPageInfo(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = filterData;
                _args[1] = surfaceData;
                System.IAsyncResult _result = base.BeginInvoke("GetSampleListPageInfo", _args, callback, asyncState);
                return _result;
            }
            
            public WebMech.WebMechService.PageInfoData EndGetSampleListPageInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                WebMech.WebMechService.PageInfoData _result = ((WebMech.WebMechService.PageInfoData)(base.EndInvoke("GetSampleListPageInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSampleList(WebMech.WebMechService.SearchFilterData filterData, WebMech.WebMechService.SurfaceData surfaceData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = filterData;
                _args[1] = surfaceData;
                System.IAsyncResult _result = base.BeginInvoke("GetSampleList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData> EndGetSampleList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData> _result = ((System.Collections.ObjectModel.ObservableCollection<WebMech.WebMechService.SampleData>)(base.EndInvoke("GetSampleList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSample(WebMech.WebMechService.SampleData sampleData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sampleData;
                System.IAsyncResult _result = base.BeginInvoke("GetSample", _args, callback, asyncState);
                return _result;
            }
            
            public WebMech.WebMechService.Model3DData EndGetSample(System.IAsyncResult result) {
                object[] _args = new object[0];
                WebMech.WebMechService.Model3DData _result = ((WebMech.WebMechService.Model3DData)(base.EndInvoke("GetSample", _args, result)));
                return _result;
            }
        }
    }
}
